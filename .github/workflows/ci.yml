name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8
      - name: Run black
        run: black --check --diff .
      - name: Run isort
        run: isort --check-only --diff .
      - name: Run flake8
        run: flake8 --max-line-length=88 --extend-ignore=E203,W503 .

  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10', '3.11']
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y fonts-dejavu-core libpq-dev
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-xdist pytest-mock
      
      - name: Run unit tests
        run: |
          pytest tests/unit/ -v --tb=short --cov=. --cov-report=xml
      
      - name: Run integration tests
        run: |
          pytest tests/integration/ -v --tb=short
      
      - name: Run E2E tests
        run: |
          pytest tests/e2e/ -v --tb=short
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety
      - name: Run bandit security linter
        run: bandit -r . -x tests/
      - name: Check dependencies for vulnerabilities
        run: safety check

  build:
    needs: [lint, test, security]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run smoke tests
        run: |
          python -c "from app.main import app; print('App imports successfully')"
          python -c "from utils.pdf_builder import build_pdf; print('PDF builder imports successfully')"
      
      - name: Create deployment artifact
        run: |
          mkdir -p artifacts
          zip -r artifacts/retirement-system-${{ github.sha }}.zip . \
            -x "*.git*" "*.pytest_cache*" "*__pycache__*" "*.coverage*" "test_*.db"
      
      - name: Upload artifact
        uses: actions/upload-artifact@v3
        with:
          name: retirement-system-${{ github.sha }}
          path: artifacts/retirement-system-${{ github.sha }}.zip