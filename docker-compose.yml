version: '3.8'

services:
  # PostgreSQL database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: retirement_db
      POSTGRES_USER: retirement_user
      POSTGRES_PASSWORD: retirement_pass
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U retirement_user -d retirement_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: always

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Main application
  app:
    build: .
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://retirement_user:retirement_pass@db:5432/retirement_db
      - REDIS_URL=redis://redis:6379/0
      - ENVIRONMENT=production
      - PYTHONUNBUFFERED=1
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./logs:/app/logs
      - ./artifacts:/app/artifacts
      - ./temp:/app/temp
    restart: always
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 15s
      timeout: 10s
      retries: 5
      start_period: 40s

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - app
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:
