import React, { useState, useEffect } from "react";
import { useParams, Link, useNavigate } from "react-router-dom";
import axios from "axios";
import { apiFetch } from "../lib/api";
import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import * as XLSX from 'xlsx';

const ASSET_TYPES = [
  { value: "rental_property", label: "דירה להשכרה" },
  { value: "investment", label: "השקעות" },
  { value: "stocks", label: "מניות" },
  { value: "bonds", label: "אגרות חוב" },
  { value: "mutual_funds", label: "קרנות נאמנות" },
  { value: "real_estate", label: "נדלן" },
  { value: "savings_account", label: "חשבון חיסכון" },
  { value: "other", label: "אחר" }
];

interface YearlyProjection {
  year: number;
  clientAge: number;
  totalMonthlyIncome: number;
  totalMonthlyTax: number;
  netMonthlyIncome: number;
  incomeBreakdown: number[];
  taxBreakdown: number[];
}

/**
 * מחשב את הערך הנוכחי הנקי (NPV) של תזרים מזומנים
 * @param cashFlows מערך של תזרימי מזומנים (ערך שלילי עבור השקעה ראשונית, חיובי עבור תקבולים)
 * @param discountRate שיעור היוון שנתי (למשל 0.05 עבור 5%)
 * @returns הערך הנוכחי הנקי (NPV)
 */
function calculateNPV(cashFlows: number[], discountRate: number): number {
  return cashFlows.reduce((sum, cashFlow, year) => {
    return sum + (cashFlow / Math.pow(1 + discountRate, year));
  }, 0);
}

/**
 * יוצר דוח PDF עם תמיכה מלאה בעברית
 */
function generatePDFReport(
  yearlyProjection: YearlyProjection[],
  pensionFunds: any[],
  additionalIncomes: any[],
  capitalAssets: any[],
  clientData: any
) {
  const doc = new jsPDF();
  
  // הגדרת כיוון RTL ופונט תומך עברית
  doc.setR2L(true);
  doc.setLanguage("he");
  
  let yPosition = 20;
  
  // כותרת הדוח
  doc.setFontSize(20);
  doc.text('דוח פנסיוני - תמונת מצב', 105, yPosition, { align: 'center' });
  yPosition += 15;
  
  // תאריך יצירת הדוח
  doc.setFontSize(12);
  const currentDate = new Date().toLocaleDateString('he-IL');
  doc.text(`תאריך יצירת הדוח: ${currentDate}`, 200, yPosition, { align: 'right' });
  yPosition += 20;
  
  // חישוב NPV
  const annualNetCashFlows = yearlyProjection.map(yearData => yearData.netMonthlyIncome * 12);
  const npv = calculateNPV(annualNetCashFlows, 0.03);
  
  // הצגת NPV
  doc.setFontSize(14);
  doc.text('ערך נוכחי נקי (NPV) של התזרים:', 200, yPosition, { align: 'right' });
  yPosition += 10;
  doc.setFontSize(16);
  doc.setTextColor(0, 128, 0); // צבע ירוק
  doc.text(`₪${Math.round(npv).toLocaleString()}`, 200, yPosition, { align: 'right' });
  doc.setTextColor(0, 0, 0); // חזרה לצבע שחור
  yPosition += 20;
  
  // טבלת תזרים מזומנים
  doc.setFontSize(14);
  doc.text('תחזית תזרים מזומנים שנתי:', 200, yPosition, { align: 'right' });
  yPosition += 10;
  
  const tableData = yearlyProjection.map(year => [
    year.year.toString(),
    `₪${year.totalMonthlyIncome.toLocaleString()}`,
    `₪${year.totalMonthlyTax.toLocaleString()}`,
    `₪${year.netMonthlyIncome.toLocaleString()}`,
    `₪${(year.netMonthlyIncome * 12).toLocaleString()}`
  ]);
  
  autoTable(doc, {
    head: [['שנה', 'הכנסה חודשית', 'מס חודשי', 'נטו חודשי', 'נטו שנתי']],
    body: tableData,
    startY: yPosition,
    styles: {
      font: 'helvetica',
      fontSize: 10,
      cellPadding: 3,
      halign: 'center'
    },
    headStyles: {
      fillColor: [233, 236, 239],
      textColor: [0, 0, 0],
      fontStyle: 'bold'
    },
    columnStyles: {
      0: { halign: 'center' },
      1: { halign: 'right' },
      2: { halign: 'right' },
      3: { halign: 'right' },
      4: { halign: 'right' }
    },
    margin: { right: 20, left: 20 }
  });
  
  // עמוד חדש לפירוט נכסים
  doc.addPage();
  yPosition = 20;
  
  // פירוט נכסי הון
  if (capitalAssets.length > 0) {
    doc.setFontSize(14);
    doc.text('נכסי הון:', 200, yPosition, { align: 'right' });
    yPosition += 10;
    
    const capitalAssetsData = capitalAssets.map(asset => [
      asset.description || 'ללא תיאור',
      ASSET_TYPES.find(t => t.value === asset.asset_type)?.label || asset.asset_type,
      `₪${(asset.monthly_income || 0).toLocaleString()}`,
      `₪${(asset.current_value || 0).toLocaleString()}`,
      asset.start_date || 'לא צוין',
      asset.end_date || 'ללא הגבלה'
    ]);
    
    autoTable(doc, {
      head: [['תיאור', 'סוג נכס', 'הכנסה חודשית', 'ערך נוכחי', 'תאריך התחלה', 'תאריך סיום']],
      body: capitalAssetsData,
      startY: yPosition,
      styles: {
        font: 'helvetica',
        fontSize: 9,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [233, 236, 239],
        textColor: [0, 0, 0],
        fontStyle: 'bold'
      },
      margin: { right: 20, left: 20 }
    });
    
    yPosition = (doc as any).lastAutoTable.finalY + 20;
  }
  
  // פירוט קרנות פנסיה
  if (pensionFunds.length > 0) {
    doc.setFontSize(14);
    doc.text('קרנות פנסיה:', 200, yPosition, { align: 'right' });
    yPosition += 10;
    
    const pensionData = pensionFunds.map(fund => [
      fund.fund_name || 'ללא שם',
      `₪${(fund.current_balance || 0).toLocaleString()}`,
      `₪${(fund.monthly_deposit || 0).toLocaleString()}`,
      `${((fund.annual_return_rate || 0) * 100).toFixed(1)}%`,
      (fund.retirement_age || 67).toString()
    ]);
    
    autoTable(doc, {
      head: [['שם הקרן', 'יתרה נוכחית', 'הפקדה חודשית', 'תשואה שנתית', 'גיל פרישה']],
      body: pensionData,
      startY: yPosition,
      styles: {
        font: 'helvetica',
        fontSize: 9,
        cellPadding: 2
      },
      headStyles: {
        fillColor: [233, 236, 239],
        textColor: [0, 0, 0],
        fontStyle: 'bold'
      },
      margin: { right: 20, left: 20 }
    });
  }
  
  // שמירת הקובץ
  doc.save(`דוח-פנסיוני-${currentDate}.pdf`);
}

/**
 * יוצר דוח Excel
 */
function generateExcelReport(
  yearlyProjection: YearlyProjection[],
  pensionFunds: any[],
  additionalIncomes: any[],
  capitalAssets: any[],
  clientData: any
) {
  const workbook = XLSX.utils.book_new();
  
  // גיליון 1: תזרים מזומנים
  const cashflowData = [
    ['שנה', 'הכנסה חודשית', 'מס חודשי', 'נטו חודשי', 'נטו שנתי'],
    ...yearlyProjection.map(year => [
      year.year.toString(),
      year.totalMonthlyIncome.toString(),
      year.totalMonthlyTax.toString(),
      year.netMonthlyIncome.toString(),
      (year.netMonthlyIncome * 12).toString()
    ])
  ];
  
  // חישוב NPV
  const annualNetCashFlows = yearlyProjection.map(yearData => yearData.netMonthlyIncome * 12);
  const npv = calculateNPV(annualNetCashFlows, 0.03);
  
  // הוספת NPV לגיליון
  cashflowData.push(['', '', '', '', '']);
  cashflowData.push(['ערך נוכחי נקי (NPV):', '', '', '', Math.round(npv).toString()]);
  
  const cashflowSheet = XLSX.utils.aoa_to_sheet(cashflowData);
  XLSX.utils.book_append_sheet(workbook, cashflowSheet, 'תזרים מזומנים');
  
  // גיליון 2: נכסי הון
  if (capitalAssets.length > 0) {
    const capitalAssetsData = [
      ['תיאור', 'סוג נכס', 'הכנסה חודשית', 'ערך נוכחי', 'תאריך התחלה', 'תאריך סיום'],
      ...capitalAssets.map(asset => [
        asset.description || 'ללא תיאור',
        ASSET_TYPES.find(t => t.value === asset.asset_type)?.label || asset.asset_type,
        (asset.monthly_income || 0).toString(),
        (asset.current_value || 0).toString(),
        asset.start_date || 'לא צוין',
        asset.end_date || 'ללא הגבלה'
      ])
    ];
    
    const capitalAssetsSheet = XLSX.utils.aoa_to_sheet(capitalAssetsData);
    XLSX.utils.book_append_sheet(workbook, capitalAssetsSheet, 'נכסי הון');
  }
  
  // גיליון 3: קרנות פנסיה
  if (pensionFunds.length > 0) {
    const pensionData = [
      ['שם הקרן', 'יתרה נוכחית', 'הפקדה חודשית', 'תשואה שנתית', 'גיל פרישה'],
      ...pensionFunds.map(fund => [
        fund.fund_name || 'ללא שם',
        (fund.current_balance || 0).toString(),
        (fund.monthly_deposit || 0).toString(),
        ((fund.annual_return_rate || 0) * 100).toString(),
        (fund.retirement_age || 67).toString()
      ])
    ];
    
    const pensionSheet = XLSX.utils.aoa_to_sheet(pensionData);
    XLSX.utils.book_append_sheet(workbook, pensionSheet, 'קרנות פנסיה');
  }
  
  // גיליון 4: הכנסות נוספות
  if (additionalIncomes.length > 0) {
    const additionalIncomesData = [
      ['תיאור', 'סכום חודשי', 'תאריך התחלה', 'תאריך סיום'],
      ...additionalIncomes.map(income => [
        income.description || 'ללא תיאור',
        (income.monthly_amount || 0).toString(),
        income.start_date || 'לא צוין',
        income.end_date || 'ללא הגבלה'
      ])
    ];
    
    const additionalIncomesSheet = XLSX.utils.aoa_to_sheet(additionalIncomesData);
    XLSX.utils.book_append_sheet(workbook, additionalIncomesSheet, 'הכנסות נוספות');
  }
  
  // שמירת הקובץ
  const currentDate = new Date().toLocaleDateString('he-IL');
  XLSX.writeFile(workbook, `דוח-פנסיוני-${currentDate}.xlsx`);
}

// הוסף את הפונקציות הללו לקובץ SimpleReports.tsx הקיים
// והוסף את הכפתורים להפקת דוחות

const SimpleReports = () => {
  // קוד קיים...
  
  // הוסף את הפונקציות הללו לטיפול בכפתורים
  const handleGeneratePdf = () => {
    try {
      // יצירת דוח PDF עם הנתונים הקיימים
      const yearlyProjection = generateYearlyProjection();
      generatePDFReport(yearlyProjection, pensionFunds, additionalIncomes, capitalAssets, client);
      
      alert('דוח PDF נוצר בהצלחה');
    } catch (err) {
      console.error('שגיאה ביצירת דוח PDF:', err);
      alert('שגיאה ביצירת דוח PDF: ' + err.message);
    }
  };
  
  const handleGenerateExcel = () => {
    try {
      // יצירת דוח Excel עם הנתונים הקיימים
      const yearlyProjection = generateYearlyProjection();
      generateExcelReport(yearlyProjection, pensionFunds, additionalIncomes, capitalAssets, client);
      
      alert('דוח Excel נוצר בהצלחה');
    } catch (err) {
      console.error('שגיאה ביצירת דוח Excel:', err);
      alert('שגיאה ביצירת דוח Excel: ' + err.message);
    }
  };
  
  // הוסף את הכפתורים לממשק
  return (
    <div>
      {/* קוד קיים... */}
      
      <div style={{ 
        marginTop: '20px', 
        padding: '20px', 
        border: '1px solid #007bff', 
        borderRadius: '4px',
        backgroundColor: '#f8f9ff'
      }}>
        <h3>יצירת דוחות</h3>
        
        <div style={{ display: 'flex', gap: '15px', marginBottom: '15px' }}>
          <button
            onClick={handleGeneratePdf}
            style={{
              backgroundColor: '#dc3545',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px'
            }}
          >
            יצירת דוח PDF
          </button>
          
          <button
            onClick={handleGenerateExcel}
            style={{
              backgroundColor: '#28a745',
              color: 'white',
              border: 'none',
              padding: '12px 24px',
              borderRadius: '4px',
              cursor: 'pointer',
              fontSize: '16px'
            }}
          >
            יצירת דוח Excel
          </button>
        </div>
      </div>
      
      {/* קוד קיים... */}
    </div>
  );
};

export default SimpleReports;
